# Release workflow - Only runs on GitHub Release or manual dispatch
name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease

jobs:
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    permissions:
      contents: read   # Read code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write  # Allow writing content (create tags, push code)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Bump version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Generate Release Notes
      run: |
        # Get previous version tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --exclude="v${{ env.NEW_VERSION }}" 2>/dev/null || echo "")

        # Generate commit log
        if [ -n "$PREVIOUS_TAG" ]; then
          COMMIT_LOG=$(git log --oneline --pretty=format:"- %s" "$PREVIOUS_TAG"..HEAD)
        else
          COMMIT_LOG=$(git log --oneline --pretty=format:"- %s" -10)
        fi

        # Extract different types of changes
        FEATURES=$(echo "$COMMIT_LOG" | grep -i "feat\|feature" || echo "")
        FIXES=$(echo "$COMMIT_LOG" | grep -i "fix\|bugfix" || echo "")
        DOCS=$(echo "$COMMIT_LOG" | grep -i "docs\|documentation" || echo "")
        CHORES=$(echo "$COMMIT_LOG" | grep -i "chore\|refactor\|style" || echo "")
        
        cat > RELEASE_NOTES.md << EOF
        ## 🚀 Claude PDD CLI v${{ env.NEW_VERSION }}

        $(if [ -n "$FEATURES" ]; then
        echo "### ✨ New Features"
        echo "$FEATURES"
        echo ""
        fi)

        $(if [ -n "$FIXES" ]; then
        echo "### 🐛 Bug Fixes"
        echo "$FIXES"
        echo ""
        fi)

        $(if [ -n "$DOCS" ]; then
        echo "### 📚 Documentation Updates"
        echo "$DOCS"
        echo ""
        fi)

        $(if [ -n "$CHORES" ]; then
        echo "### 🔧 Other Improvements"
        echo "$CHORES"
        echo ""
        fi)

        ### 📦 Installation

        \`\`\`bash
        # Global installation
        npm install -g claude-pdd-cli@${{ env.NEW_VERSION }}

        # Or use the latest version
        npm install -g claude-pdd-cli@latest
        \`\`\`

        ### 🚀 Quick Start

        \`\`\`bash
        # Check version
        cpdd --version

        # Initialize PDD workflow
        cpdd init

        # Diagnose environment
        cpdd doctor

        # View help
        cpdd --help
        \`\`\`

        ---

        $(if [ -n "$PREVIOUS_TAG" ]; then
        echo "**Full Changelog**: https://github.com/MuziGeek/claude-pdd-cli/compare/$PREVIOUS_TAG...v${{ env.NEW_VERSION }}"
        else
        echo "**Project Homepage**: https://github.com/MuziGeek/claude-pdd-cli"
        fi)

        **Documentation**: [User Guide](https://github.com/MuziGeek/claude-pdd-cli#readme)
        EOF
        
    - name: Create Tag and Push
      run: |
        git add package.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Claude PDD CLI v${{ env.NEW_VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'rc') }}

  publish-after-release:
    name: Publish to NPM after GitHub Release
    runs-on: ubuntu-latest
    needs: create-github-release
    if: github.event_name == 'workflow_dispatch' && success()
    
    permissions:
      contents: read   # Read code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-success-summary:
    name: Create Success Summary
    runs-on: ubuntu-latest
    needs: publish-after-release
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Create Success Summary
      run: |
        echo "🎉 Successfully released Claude PDD CLI!" >> $GITHUB_STEP_SUMMARY
        echo "📦 Package published to NPM" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ GitHub release created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: $(node -p 'require(\"./package.json\").version')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation**: \`npm install -g claude-pdd-cli@latest\`" >> $GITHUB_STEP_SUMMARY